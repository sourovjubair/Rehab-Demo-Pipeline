# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './src/ui/inference.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from pickle import TRUE
from PyQt5 import QtCore, QtGui, QtWidgets, QtMultimedia, QtMultimediaWidgets
from pipeline import exercise_map
import pathlib
from random import randint


class InferenceWindow(QtWidgets.QWidget):
    def __init__(
        self, formWindowReference=None, recordWindowReference=None
    ) -> None:
        """
        Custom constructor to have the reference to the parent window here
        """
        super().__init__()
        self.formWindowReference = formWindowReference
        self.recordWindowReference = recordWindowReference

    def setupUi(self, MainWindow):
        self.MainWindow = MainWindow
        self.MainWindow.setObjectName("MainWindow")
        self.MainWindow.resize(1280, 720)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.MainWindow.setFont(font)
        
        self.MainWindow.setWindowIcon(QtGui.QIcon('favicon.png')) 

        self.centralwidget = QtWidgets.QWidget(self.MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.centralwidget.sizePolicy().hasHeightForWidth()
        )
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")

        self.rootLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.rootLayout.setSpacing(24)
        self.rootLayout.setObjectName("rootLayout")

        self.videoAndScoreContainer = QtWidgets.QHBoxLayout()
        self.videoAndScoreContainer.setObjectName("videoAndScoreContainer")

        # The video player widget
        self.videoAndLabelContainer = QtWidgets.QVBoxLayout()
        self.videoAndLabelContainer.setSizeConstraint(
            QtWidgets.QLayout.SetDefaultConstraint
        )
        self.videoAndLabelContainer.setObjectName("videoAndLabelContainer")

        self.exerciseTypeLabel = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.exerciseTypeLabel.setFont(font)
        self.exerciseTypeLabel.setStyleSheet(
            "background: rgba(0, 0, 0, 0.5);\n" "color: white;\n" ""
        )
        self.exerciseTypeLabel.setAlignment(
            QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop
        )
        self.exerciseTypeLabel.setWordWrap(True)
        self.exerciseTypeLabel.setObjectName("exerciseTypeLabel")
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.exerciseTypeLabel.sizePolicy().hasHeightForWidth()
        )
        self.exerciseTypeLabel.setSizePolicy(sizePolicy)
        self.videoAndLabelContainer.addWidget(self.exerciseTypeLabel)

        self.videoWidget = QtMultimediaWidgets.QVideoWidget(self.centralwidget)
        self.mediaPlayer = QtMultimedia.QMediaPlayer(
            None, QtMultimedia.QMediaPlayer.VideoSurface
        )
        self.videoAndLabelContainer.addWidget(self.videoWidget)
        self.mediaPlayer.setVideoOutput(self.videoWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(
            self.videoWidget.sizePolicy().hasHeightForWidth()
        )
        self.videoWidget.setSizePolicy(sizePolicy)
        self.videoWidget.stackUnder(self.exerciseTypeLabel)

        self.videoAndScoreContainer.addLayout(self.videoAndLabelContainer)

        # scores and suggestions layout
        self.scoresAndSuggesionsLayout = QtWidgets.QVBoxLayout()
        self.scoresAndSuggesionsLayout.setContentsMargins(24, -1, 24, -1)
        self.scoresAndSuggesionsLayout.setObjectName(
            "scoresAndSuggesionsLayout"
        )
        self.cfScoreLayout = QtWidgets.QHBoxLayout()
        self.cfScoreLayout.setObjectName("cfScoreLayout")
        self.cfScoreTitleLabel = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.cfScoreTitleLabel.setFont(font)
        self.cfScoreTitleLabel.setObjectName("cfScoreTitleLabel")
        self.cfScoreLayout.addWidget(self.cfScoreTitleLabel)
        self.cfScoreLabel = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.cfScoreLabel.setFont(font)
        self.cfScoreLabel.setStyleSheet(
            "background-color: #006325;\n"
            "color: white;\n"
            "\n"
            "min-width:  70px;\n"
            "max-width:  70px;\n"
            "min-height: 70px;\n"
            "max-height: 70px;\n"
            "\n"
            "border-radius: 35px;        \n"
            "border-width: 1px;\n"
            "border-color: green;\n"
            "border-style: solid;"
        )
        self.cfScoreLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.cfScoreLabel.setObjectName("cfScoreLabel")
        self.cfScoreLayout.addWidget(self.cfScoreLabel)
        self.scoresAndSuggesionsLayout.addLayout(self.cfScoreLayout)
        self.poScoreLayout = QtWidgets.QHBoxLayout()
        self.poScoreLayout.setObjectName("poScoreLayout")
        self.poScoreTitleLabel = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.poScoreTitleLabel.setFont(font)
        self.poScoreTitleLabel.setObjectName("poScoreTitleLabel")
        self.poScoreLayout.addWidget(self.poScoreTitleLabel)
        self.poScoreLabel = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.poScoreLabel.setFont(font)
        self.poScoreLabel.setStyleSheet(
            "background-color: orange;\n"
            "color: black;\n"
            "\n"
            "min-width:  70px;\n"
            "max-width:  70px;\n"
            "min-height: 70px;\n"
            "max-height: 70px;\n"
            "\n"
            "border-radius: 35px;        \n"
            "border-width: 1px;\n"
            "border-color: orange;\n"
            "border-style: solid;"
        )
        self.poScoreLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.poScoreLabel.setObjectName("poScoreLabel")
        self.poScoreLayout.addWidget(self.poScoreLabel)
        self.scoresAndSuggesionsLayout.addLayout(self.poScoreLayout)
        self.suggestionsLayout = QtWidgets.QVBoxLayout()
        self.suggestionsLayout.setObjectName("suggestionsLayout")
        self.remarkLabel = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.remarkLabel.setFont(font)
        self.remarkLabel.setObjectName("remarkLabel")
        self.suggestionsLayout.addWidget(self.remarkLabel)
        self.suggestionsTitleLabel = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setItalic(True)
        self.suggestionsTitleLabel.setFont(font)
        self.suggestionsTitleLabel.setObjectName("suggestionsTitleLabel")
        self.suggestionsLayout.addWidget(self.suggestionsTitleLabel)
        self.suggestionsLabel = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(2)
        sizePolicy.setHeightForWidth(
            self.suggestionsLabel.sizePolicy().hasHeightForWidth()
        )
        self.suggestionsLabel.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.suggestionsLabel.setFont(font)
        self.suggestionsLabel.setText("")
        self.suggestionsLabel.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop
        )
        self.suggestionsLabel.setObjectName("suggestionsLabel")
        self.suggestionsLayout.addWidget(self.suggestionsLabel)
        self.suggestionsLayout.setStretch(0, 1)
        self.suggestionsLayout.setStretch(2, 5)
        self.scoresAndSuggesionsLayout.addLayout(self.suggestionsLayout)

        self.videoAndScoreContainer.addLayout(self.scoresAndSuggesionsLayout)
        self.videoAndScoreContainer.setStretch(0, 2)
        self.videoAndScoreContainer.setStretch(1, 1)

        self.rootLayout.addLayout(self.videoAndScoreContainer)

        self.actionsLayout = QtWidgets.QHBoxLayout()
        self.actionsLayout.setSpacing(0)
        self.actionsLayout.setObjectName("actionsLayout")

        self.mainMenuButton = QtWidgets.QPushButton(self.centralwidget)
        self.mainMenuButton.setStyleSheet(
            """
            border-width: 5px;
            border-color: #000000;
            border-radius: 5px;
            background: #0a0a23;
            color: #FEFEFE;
            padding: 10px 20px;
            font-size: 12px;
            font-weight: bold;
            """
        )
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.mainMenuButton.sizePolicy().hasHeightForWidth()
        )
        self.mainMenuButton.setSizePolicy(sizePolicy)
        self.mainMenuButton.setMinimumSize(QtCore.QSize(300, 0))
        self.mainMenuButton.setObjectName("mainMenuButton")
        self.actionsLayout.addWidget(self.mainMenuButton)

        self.repeatExerciseButton = QtWidgets.QPushButton(self.centralwidget)
        self.repeatExerciseButton.setStyleSheet(
            """
            border-width: 5px;
            border-color: #000000;
            border-radius: 5px;
            background: #0a0a23;
            color: #FEFEFE;
            padding: 10px 20px;
            font-size: 12px;
            font-weight: bold;
            """
        )
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.repeatExerciseButton.sizePolicy().hasHeightForWidth()
        )
        self.repeatExerciseButton.setSizePolicy(sizePolicy)
        self.repeatExerciseButton.setMinimumSize(QtCore.QSize(300, 0))
        self.repeatExerciseButton.setObjectName("repeatExerciseButton")
        self.actionsLayout.addWidget(self.repeatExerciseButton)

        self.rootLayout.addLayout(self.actionsLayout)
        self.rootLayout.setStretch(0, 2)

        self.MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self.MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 842, 28))
        self.menubar.setObjectName("menubar")
        self.MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self.MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(self.MainWindow)
        QtCore.QMetaObject.connectSlotsByName(self.MainWindow)

        self.mediaPlayer.stateChanged.connect(self.handle_media_state_changed)
        self.exercise_type = None
        self.datatype = None
        self.mainMenuButton.clicked.connect(
            self.handle_main_menu_button_clicked
        )
        self.repeatExerciseButton.clicked.connect(
            self.handle_repeat_button_clicked
        )

    def handle_repeat_button_clicked(self):
        if (
            self.formWindowReference.state["datatype"] == "live-feed"
            and self.recordWindowReference is not None
        ):
            self.MainWindow.close()
            self.recordWindowReference.state["data"] = None
            self.recordWindowReference.MainWindow.show()

    def handle_main_menu_button_clicked(self):
        self.MainWindow.close()
        # clear form state
        self.formWindowReference.state = dict()
        self.formWindowReference.MainWindow.show()

    def set_exercise_type(self, exercise_type):
        self.exercise_type = exercise_type
        self.exerciseTypeLabel.setText(
            "You just performed {}".format(self.exercise_type),
        )
        self.play_exercise_video_file()

    def get_suggestion(self, total):
        exercise_type_short = exercise_map[self.exercise_type]

        # general case
        if total < 0.75:
            self.remarkLabel.setText("DECENT TRY!")
            return "Please follow the expert trainer video"

        if exercise_type_short == "ex1":
            return "Raise your arms higher to improve score"
        elif exercise_type_short == "ex2":
            return "Try to bend more towards both sides alternatingly"
        elif exercise_type_short == "ex3":
            return (
                "Rotate your upper body more towards both sides alternatingly"
            )
        elif exercise_type_short == "ex4":
            return "Make wider rotating motion with your hips"
        elif exercise_type_short == "ex5":
            return "Try to bend yourself lower"

        return ""

    def set_score_and_suggestions_label(self, scores):
        # scores is a 2D tensor -> [[CF, PO]]
        cf, po = scores[0]
        total = (cf + po) / 2
        self.set_score_labels(cf, po)
        self.suggestionsLabel.setText(self.get_suggestion(total))

    def set_data_type(self, datatype):
        self.datatype = datatype

    def set_score_color_dynamically(self, score, label_widget):
        if score >= 80:
            background_color = "#006325"
            text_color = "#fff"
        elif score >= 70 and score < 80:
            background_color = "orange"
            text_color = "#000"
        else:
            background_color = "#bd0000"
            text_color = "#fff"

        label_widget.setStyleSheet(
            f"background-color: {background_color};\n"
            f"color: {text_color};\n"
            "\n"
            "min-width:  70px;\n"
            "max-width:  70px;\n"
            "min-height: 70px;\n"
            "max-height: 70px;\n"
            "\n"
            "border-radius: 35px;        \n"
            "border-width: 1px;\n"
            "border-color: orange;\n"
            "border-style: solid;",
        )

    def set_score_labels(self, cf, po):
        cf = cf * 100
        po = po * 100

        self.cfScoreLabel.setText("{:.0f}".format(cf))
        self.poScoreLabel.setText("{:.0f}".format(po))

        self.set_score_color_dynamically(cf, self.cfScoreLabel)
        self.set_score_color_dynamically(po, self.poScoreLabel)

    def play_exercise_video_file(self):
        if self.datatype != "live-feed":
            self.exerciseTypeLabel.setHidden(True)
            self.videoWidget.setHidden(True)
            self.MainWindow.resize(320, 720)
            return

        if self.exercise_type is None or not isinstance(
            self.exercise_type, str
        ):
            return

        filepath = str(pathlib.Path(".").absolute().joinpath("output.avi"))
        self.mediaPlayer.setMedia(
            QtMultimedia.QMediaContent(QtCore.QUrl.fromLocalFile(filepath))
        )
        self.mediaPlayer.play()

    def handle_media_state_changed(self, state):
        # continuous loop
        if self.mediaPlayer.state() == QtMultimedia.QMediaPlayer.StoppedState:
            self.play_exercise_video_file()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(
            _translate(
                "MainWindow", "Intelligent Rehabilitation Assistant: Scores"
            )
        )
        self.cfScoreTitleLabel.setText(_translate("MainWindow", "CF Score"))
        self.poScoreTitleLabel.setText(_translate("MainWindow", "PO Score"))
        self.cfScoreLabel.setText(_translate("MainWindow", "..."))
        self.poScoreLabel.setText(_translate("MainWindow", "..."))
        self.remarkLabel.setText(_translate("MainWindow", "GREAT JOB!"))
        self.suggestionsTitleLabel.setText(
            _translate("MainWindow", "Suggestions:")
        )
        self.exerciseTypeLabel.setText(_translate("MainWindow", "",))
        self.mainMenuButton.setText(_translate("MainWindow", "Main Menu"))
        self.repeatExerciseButton.setText(
            _translate("MainWindow", "Repeat Exercise")
        )


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = InferenceWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
