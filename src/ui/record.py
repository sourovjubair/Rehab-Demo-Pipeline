# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\src\ui\record.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from os.path import abspath
from pathlib import Path

sys.path.extend([str(Path(abspath(__file__)).parent.parent)])

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSlot, Qt
from .inference import InferenceWindow
from pipeline import Pipeline
import numpy as np
import datetime
from ui.utils.KinectRecorder import KinectRecorder


class RecordWindow(QtWidgets.QWidget):
    def __init__(self, parent) -> None:
        """
        Custom constructor to have the reference to the parent window here
        """
        super().__init__()
        self.parent = parent

    def setupUi(self, MainWindow):
        self.MainWindow = MainWindow
        self.MainWindow.setObjectName("MainWindow")
        self.MainWindow.resize(800, 600)

        self.centralwidget = QtWidgets.QWidget(self.MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")

        self.MainWindow.setWindowIcon(QtGui.QIcon('favicon.png'))

        self.imageLabel = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred
        )
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred
        )
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(2)
        sizePolicy.setHeightForWidth(
            self.imageLabel.sizePolicy().hasHeightForWidth()
        )
        self.imageLabel.setSizePolicy(sizePolicy)
        self.imageLabel.setText("")
        self.imageLabel.setObjectName("imageLabel")
        self.imageLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout.addWidget(self.imageLabel)
        self.set_image_label_to_grey()

        self.recordTimerLabel = QtWidgets.QLabel(self.centralwidget)
        self.recordTimerLabel.setMinimumSize(QtCore.QSize(0, 50))
        self.recordTimerLabel.setAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.recordTimerLabel.setFont(font)
        self.recordTimerLabel.setObjectName("recordTimerLabel")
        self.verticalLayout.addWidget(self.recordTimerLabel)

        self.actionsButtonLayout = QtWidgets.QHBoxLayout()
        self.actionsButtonLayout.setSizeConstraint(
            QtWidgets.QLayout.SetNoConstraint
        )
        self.actionsButtonLayout.setObjectName("actionsButtonLayout")
        self.goBackButton = QtWidgets.QPushButton(self.centralwidget)
        self.goBackButton.setStyleSheet(
            """
            border-width: 5px;
            border-color: #000000;
            border-radius: 5px;
            background: #0a0a23;
            color: #FEFEFE;
            padding: 10px 20px;
            font-size: 12px;
            font-weight: bold;
            """
        )
        font = QtGui.QFont()
        font.setPointSize(14)
        self.goBackButton.setFont(font)
        self.goBackButton.setObjectName("goBackButton")
        self.actionsButtonLayout.addWidget(self.goBackButton)
        self.startStopRecordingButton = QtWidgets.QPushButton(
            self.centralwidget
        )
        self.startStopRecordingButton.setStyleSheet(
            """
            border-width: 5px;
            border-color: #000000;
            border-radius: 5px;
            background: #0a0a23;
            color: #FEFEFE;
            padding: 10px 20px;
            font-size: 12px;
            font-weight: bold;
            """
        )
        font = QtGui.QFont()
        font.setPointSize(14)
        self.startStopRecordingButton.setFont(font)
        self.startStopRecordingButton.setAutoDefault(False)
        self.startStopRecordingButton.setDefault(False)
        self.startStopRecordingButton.setFlat(False)
        self.startStopRecordingButton.setObjectName("startStopRecordingButton")
        self.actionsButtonLayout.addWidget(self.startStopRecordingButton)
        self.getScoreButton = QtWidgets.QPushButton(self.centralwidget)
        self.getScoreButton.setStyleSheet(
            """
            border-width: 5px;
            border-color: #000000;
            border-radius: 5px;
            background: #0a0a23;
            color: #FEFEFE;
            padding: 10px 20px;
            font-size: 12px;
            font-weight: bold;
            """
        )

        self.MainWindow.setStyleSheet(
            """            
            background-color: #4d47b2;
            border-radius: 10px;
            color: #FFFFFF;
            font-family: Arial, Helvetica, sans-serif;
            """
        )

        font = QtGui.QFont()
        font.setPointSize(14)
        self.getScoreButton.setFont(font)
        self.getScoreButton.setObjectName("getScoreButton")
        self.actionsButtonLayout.addWidget(self.getScoreButton)
        self.verticalLayout.addLayout(self.actionsButtonLayout)
        self.MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(self.MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self.MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.MainWindow.setStatusBar(self.statusbar)

        # child inference window setup
        self.inferenceWindowContainer = QtWidgets.QMainWindow(
            parent=self.MainWindow  # need to set the parent as current window
        )
        self.inferenceWindow = InferenceWindow(self.parent, self)
        self.inferenceWindow.setupUi(self.inferenceWindowContainer)

        # create the video capture thread
        self.thread = KinectRecorder()
        # connect its signal to the update_image slot
        self.thread.frame_data_signal.connect(self.on_frame_data_received)
        self.thread.elapsed_time_signal.connect(self.on_elapsed_time_received)

        self.startStopRecordingButton.clicked.connect(
            self.handle_start_stop_recording_button_click
        )

        self.goBackButton.clicked.connect(self.handle_go_back_button_clicked)
        self.getScoreButton.clicked.connect(
            self.handle_get_score_button_clicked
        )

        # the data that will be returned from the recording thread will be stored here
        self.data = None
        # the form state from the form window will be transferred and stored here
        self.state = None

        self.retranslateUi(self.MainWindow)
        QtCore.QMetaObject.connectSlotsByName(self.MainWindow)

    def handle_go_back_button_clicked(self):
        self.MainWindow.hide()
        self.parent.MainWindow.show()

    def handle_get_score_button_clicked(self):
        if self.data is None or not isinstance(self.data, list):
            return

        # the business logic class
        pipeline = Pipeline()
        self.state["data"] = [
            {
                "filename": "live-feed-{}".format(
                    datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
                ),
                "frame_count": len(self.data),
                "frame_data": self.data,
            }
        ]

        result = pipeline.run(**self.state)
        animation, scores = result
        # keep the animation in a persistent variable otherwise it won't play
        self.animation = animation
        # scores is a 2D tensor -> [[CF, PO]]
        scores = scores.cpu().numpy()

        self.inferenceWindow.set_data_type(self.state["datatype"])
        self.inferenceWindow.set_exercise_type(self.state["exerciseType"])
        self.inferenceWindow.set_score_and_suggestions_label(scores)
        self.MainWindow.hide()
        self.inferenceWindowContainer.show()

    def set_state(self, state):
        self.state = state

    @pyqtSlot(str)
    def on_elapsed_time_received(self, time):
        time = int(time)
        secs = time / 1000
        mins = (secs // 60) % 60
        hours = secs // 3600

        secs_str = "{:.3f}".format(secs)
        mins_str = "{:.0f}".format(mins)
        hours_str = "{:.0f}".format(hours)

        if secs < 10:
            secs_str = "0" + "{:.3f}".format(secs)

        if mins < 10:
            mins_str = "0" + "{:.0f}".format(mins)

        if hours < 10:
            hours_str = "0" + "{:.0f}".format(hours)

        self.recordTimerLabel.setText(
            "{0}:{1}:{2}".format(hours_str, mins_str, secs_str)
        )

    @pyqtSlot(np.ndarray)
    def on_frame_data_received(self, align_color_img):
        qt_img = self.convert_image_to_qt(align_color_img)
        self.imageLabel.setPixmap(qt_img)

    def convert_image_to_qt(self, numpy_array):
        numpy_array = np.array(numpy_array[:, :, :3], dtype=np.uint8)
        h, w, ch = numpy_array.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(
            numpy_array, w, h, bytes_per_line, QtGui.QImage.Format_BGR888
        )
        p = convert_to_Qt_format.scaled(512, 424, Qt.KeepAspectRatio)
        return QtGui.QPixmap.fromImage(p)

    def handle_start_stop_recording_button_click(self):
        if self.thread._run_flag:
            # store the data returned from the recording thread here
            self.data = self.thread.stop_thread()
            self.set_image_label_to_grey()
            self.recordTimerLabel.setText("")
        else:
            self.thread._run_flag = True
            self.thread.start()

    def closeEvent(self, event):
        self.thread.stop()
        event.accept()

    def set_image_label_to_grey(self):
        width, height = self.imageLabel.width(), self.imageLabel.height()
        grey = QtGui.QPixmap(width, height)
        grey.fill(QtGui.QColor("darkGray"))
        # set the image image to the grey pixmap
        self.imageLabel.setPixmap(grey)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(
            _translate(
                "MainWindow", "Intelligent Rehabilitation Assistant: Record"
            )
        )
        self.goBackButton.setText(_translate("MainWindow", "Go Back"))
        self.getScoreButton.setText(_translate("MainWindow", "Get Score"))
        self.startStopRecordingButton.setText(
            _translate("MainWindow", "Start/Stop\n" "Recording")
        )


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = RecordWindow(None)
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
